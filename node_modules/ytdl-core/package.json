{
  "name": "ytdl-core",
  "description": "Youtube video downloader in pure javascript.",
  "keywords": [
    "youtube",
    "video",
    "download"
  ],
  "version": "0.5.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-ytdl-core.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha -R spec -t 16000 test/*-test.js"
  },
  "dependencies": {
    "cheerio": "^0.18.0",
    "jstream": "~0.2.7",
    "request": "~2.37.0",
    "underscore": "~1.6.0"
  },
  "devDependencies": {
    "assert-diff": "^1.0.1",
    "mocha": "*",
    "nock": "~0.34.1",
    "stream-equal": "~0.1.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/node-ytdl-core/raw/master/LICENSE"
    }
  ],
  "readme": "# node-ytdl-core [![Build Status](https://secure.travis-ci.org/fent/node-ytdl-core.png)](http://travis-ci.org/fent/node-ytdl-core)\n\nYet another youtube downloading module. This time written with only Javascript and a more node-friendly streaming interface.\n\nFor a CLI version of this, check out [ytdl](https://github.com/fent/node-ytdl) and [pully](https://github.com/JimmyBoh/pully).\n\n# Usage\n\n```js\nvar fs = require('fs');\nvar ytdl = require('ytdl-core');\n\nytdl('http://www.youtube.com/watch?v=A02s8omM_hI')\n  .pipe(fs.createWriteStream('video.flv'));\n```\n\n\n# API\n### ytdl(url, options)\n\nAttempts to download a video from the given url. Returns a readable stream. `options` can have the following keys\n\n* `quality` - Video quality to download. Can be an [itag value](http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs) value, or `highest`/`lowest`. Defaults to `highest`.\n* `filter` - Can be `video` to filter for formats that contain video, `videoonly` for formats that contain video and no additional audio track. Can also be `audio` or `audioonly`. You can give a filtering function that gets called with each format available. Used to decide what format to download. This function is given the `format` object as its first argument, and should return true if the format is preferable.\n* `format` - This can be a specific `format` object returned from `getInfo`. This is primarily used to download specific video or audio streams. **Note:** Supplying this option will ignore the `filter` and `quality` options since the format is explicitly provided.\n* `range` - A byte range in the form `INT-INT` that specifies a part of the video to download. ie 10355705-12452856.\n\n```js\n// Example with `filter` option.\nytdl(url, { filter: function(format) { return format.container === 'mp4'; } })\n  .pipe(fs.createWriteStream('vide.mp4'));\n```\n\n`options` can also have any [request](https://github.com/mikeal/request) options.\n\nThe returned readable stream emits these additional events.\n\n#### Event: 'info'\n* `Object` - Info.\n* `Object` - Format.\n\nEmitted when the a video's `info` hash is fetched. Along with the chosen format metadata to download. `format.url` might be different if `start` was given. `format.size` will also be available.\n\nInfo and format may look like [this](https://gist.github.com/fent/6c8251132e1addb5121e).\n\n### ytdl.getInfo(url, [options], callback(err, info))\n\nUse this if you only want to get metainfo from a video.\n\n`options` gets passed to the `request()`, it can also have a `downloadURL` property set to `true` if you want ytdl to include the download url instead of the regular one. In some cases, a signature needs to be deciphered, and will require ytdl to make additional requests.\n\n### ytdl.downloadFromInfo(info, options)\n\nOnce you have received metadata from a video with the `getInfo` function,\nyou may pass that `info`, along with other `options` to `downloadFromInfo`.\n\nNote: Be sure to set the `downloadURL` option to `true` when you call `getInfo`\nor you will receive a 403 error when you call `downloadFromInfo`.\n\nThe returned readable stream emits these additional events:\n\n#### Event: 'format'\n* `Object` - Format.\n\nEmitted when a format metadata has been chosen. `format.size` will also be available.\n\n# Tips\n### Handling Separate Streams\n\nTypically 1080p or better video does not have audio encoded with it. The audio must be downloaded separately and merged via an appropriate encoding library. `ffmpeg` is the most widely used tool, with many [Node.js modules available](https://www.npmjs.com/search?q=ffmpeg). Use the `format` objects returned from `ytdl.getInfo` to download specific streams to combine to fit your needs.\n\n# Install\n\n    npm install ytdl-core\n\n\n# Tests\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fent/node-ytdl-core/issues"
  },
  "homepage": "https://github.com/fent/node-ytdl-core",
  "_id": "ytdl-core@0.5.0",
  "dist": {
    "shasum": "8f86a73ceab1cceb6ebe45f5f8119b4d2d19d032"
  },
  "_from": "ytdl-core@",
  "_resolved": "https://registry.npmjs.org/ytdl-core/-/ytdl-core-0.5.0.tgz"
}
